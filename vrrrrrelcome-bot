#!/usr/bin/env python3
# Vrrrr'ELCOME bot!

import datetime
import logging
import os
import textwrap
from typing import Set, List

import telegram
from telegram import Update, ChatMember
from telegram.constants import ParseMode
from telegram.ext import Application, CallbackContext, MessageHandler, filters, CommandHandler
from telegram.ext.filters import BaseFilter, ChatType

TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
DATA_DIR = os.environ.get('DATA_DIR', '.')
# Sticker: https://t.me/addstickers/vrrrrrelcomebot üëã
WELCOME_STICKER = 'CAACAgEAAxkBAAEDkithyh9aAAFwZEd-9pH21_Xcwom75wMAAhQCAAKi_lBGS70gXpVwuZYjBA'
# Voice: data/welcome.ogg
WELCOME_VOICE = 'AwACAgEAAxkDAAIBHGO-Qi_5GCEfG_ep6-IH-aTxS3hQAALNBAACkVT4RaAPWsx_u4ClLQQ'
WELCOME_CAPTION = "<i>Vrrrr</i> 'ELCOME! üò∏"
RECENT_DURATION = datetime.timedelta(minutes=6)
CHAT_MEMBER_GONERS = {telegram.ChatMember.BANNED, telegram.ChatMember.LEFT}


application = Application.builder().token(TELEGRAM_TOKEN).build()
application.bot.set_my_commands([('start', 'Start interacting with this bot')], scope=telegram.BotCommandScopeAllPrivateChats())


def command_handler(command, **kwargs):
    """Decorator for registering a `CommandHandler`."""
    def _register(func):
        application.add_handler(CommandHandler(command, func, **kwargs))
    return _register


def message_handler(filter: BaseFilter, **kwargs):
    """Decorator for registering a `MessageHandler`."""
    def _register(func):
        application.add_handler(MessageHandler(filter, func, **kwargs))
    return _register


async def is_chat_admin(update: Update):
    """Check if update is from chat admin"""
    user = update.effective_user
    chat = update.effective_chat

    if chat.type == 'private':
        return True

    return user.id in (admin.user.id for admin in await chat.get_administrators())


@command_handler('start', filters=ChatType.PRIVATE)
async def _start(update: Update, _context: CallbackContext):
    """Handle /start command"""
    user = update.effective_user
    await update.message.reply_text(f'Hi {user.first_name}! To use me, just invite me to your group!')
    await update.message.reply_text('I\'ll send this reply to all new users who join the group:')

    logging.info('Sending test WELCOME to %s (%d)', user.username, user.id)

    await reply_welcome(update.message)


@command_handler('brushes')
async def _brushes(update: Update, _context: CallbackContext):
    """Handle /brushes command"""
    user = update.effective_user
    chat = update.effective_chat
    if not await is_chat_admin(update):
        logging.warning('%s (%d) tried to use /brushes admin command in %s (%d)', user.username, user.id, chat.username, chat.id)
        return

    await update.message.chat.send_message(textwrap.dedent('''\
        Want to see the bushes Carni uses to draw all of their amazing artwork, go here and it will all be elucidated üòÑ

        https://www.deviantart.com/carnival/art/B-B-B-BRUSH-MAGEDDON-726046698 üñåÔ∏è
        '''))


@command_handler('freeapple')
async def _freeapple(update: Update, _context: CallbackContext):
    """Handle /freeapple command"""
    user = update.effective_user
    chat = update.effective_chat
    if not await is_chat_admin(update):
        logging.warning('%s (%d) tried to use /freeapple admin command in %s (%d)', user.username, user.id, chat.username, chat.id)
        return

    await update.message.chat.send_message(textwrap.dedent('''\
        A reference you <i>saaaaaay</i>?

        Here is Free Apple since we reference it so often this is needed https://www.youtube.com/watch?v=_F9EMbkvLBQ üçé
    '''), parse_mode=ParseMode.HTML)


@command_handler('hogarth')
async def _hogarth(update: Update, _context: CallbackContext):
    """Handle /hogarth command"""
    user = update.effective_user
    chat = update.effective_chat
    if not await is_chat_admin(update):
        logging.warning('%s (%d) tried to use /hogarth admin command in %s (%d)', user.username, user.id, chat.username, chat.id)
        return

    await update.message.chat.send_message(textwrap.dedent('''\
        M.C.A Hogarth is a SERIOUSLY rad Author!!
        The first book in their Dreamhealers series is a great place to start! ‚ù§Ô∏è

        It's free, amazing and you are welcome: https://www.goodreads.com/book/show/19455735-mindtouch
        '''))


@command_handler('twrp')
async def _twrp(update: Update, _context: CallbackContext):
    """Handle /twrp command"""
    user = update.effective_user
    chat = update.effective_chat
    if not await is_chat_admin(update):
        logging.warning('%s (%d) tried to use /twrp admin command in %s (%d)', user.username, user.id, chat.username, chat.id)
        return

    await update.message.chat.send_message(textwrap.dedent('''\
        YA'LL HAVE GON' n DONE IT now!
        GON' N SAID THE MAGIC WORK!
        <b>TWRP</b> (or 'Tupperware Remix Party') just so happens to be, the BESTEREST Band to ever exist, and can check out <a href="https://twrp.bandcamp.com">their music here!</a>

        (can highly reccomend <a href="https://twrp.bandcamp.com/track/phantom-racer-feat-the-protomen">this UTTER BANGER</a> to start with!) ‚ù§Ô∏è
    '''), parse_mode=ParseMode.HTML)


@message_handler(filters.StatusUpdate.NEW_CHAT_MEMBERS)
async def _on_new_chat_members(update: Update, _context: CallbackContext):
    """Send "Vrrrrr'elcome!" when a new user joins the chat"""
    chat = update.effective_chat
    logging.info(
        'Sending WELCOME to %s in %s %r (%d)',
        ', '.join(f'{u.username!r} ({u.id})' for u in update.message.new_chat_members),
        chat.type,
        chat.title,
        chat.id)

    messages = await reply_welcome(update.message)
    uids = {u.id for u in update.message.new_chat_members}
    schedule_cleanup(update.message.chat, messages, uids)


async def reply_welcome(message: telegram.Message):
    """Send WELCOME reply to message"""
    return [
        await message.reply_sticker(WELCOME_STICKER),
        await message.reply_voice(WELCOME_VOICE, quote=True, caption=WELCOME_CAPTION, parse_mode=ParseMode.HTML)
    ]


def schedule_cleanup(chat: telegram.Chat, messages: List[telegram.Message], uids: Set[int]):
    """Schedule cleanup of unneeded messages"""
    uids = uids.copy()

    async def _cleanup(_context):
        for uid in list(uids):
            chat_member = await chat.get_member(uid)
            if chat_member.status in CHAT_MEMBER_GONERS:
                uids.remove(uid)

        if not uids:
            # All users referenced in this message have left the chat!
            for message in messages:
                logging.info('Removing message %d (all users left)', message.message_id)
                await message.delete()

            await chat.send_message(
                '<i>"Well, <b>thief!</b> I smell you, I hear your breath, I feel your air. Where are you?"</i> üê≤',
                parse_mode=ParseMode.HTML,
                disable_notification=True)

    application.job_queue.run_once(_cleanup, RECENT_DURATION)


def main():
    logging.basicConfig(level=logging.INFO)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
