#!/usr/bin/env python3
# Vrrrr'ELCOME bot!

import datetime
import logging
import os
from typing import Set, List

import pytz
import telegram
from telegram import Update
from telegram.ext import Updater, CallbackContext, MessageHandler, Filters, BaseFilter, CommandHandler

TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
DATA_DIR = os.environ.get('DATA_DIR', '.')
# Sticker: https://t.me/addstickers/vrrrrrelcomebot üëã
WELCOME_STICKER = 'CAACAgEAAxkBAAEDkithyh9aAAFwZEd-9pH21_Xcwom75wMAAhQCAAKi_lBGS70gXpVwuZYjBA'
# Voice: data/welcome.ogg
WELCOME_VOICE = 'AwACAgEAAxkDAAO2YcovGdewbOu3QLRMgwdnQonKBNMAAt4BAAIbp1BGC0iZ8hr2NuUjBA'
WELCOME_CAPTION = "_Vrrrr_'ELCOME\\! üò∏"
RECENT_DURATION = datetime.timedelta(minutes=6)

updater = Updater(TELEGRAM_TOKEN)
updater.bot.set_my_commands([('start', 'Start interacting with this bot')], scope=telegram.BotCommandScopeAllPrivateChats())


def command_handler(command, **kwargs):
    """Decorator for registering a `CommandHandler`."""
    def _register(func):
        updater.dispatcher.add_handler(CommandHandler(command, func, **kwargs))
    return _register


def message_handler(filter: BaseFilter, **kwargs):
    """Decorator for registering a `MessageHandler`."""
    def _register(func):
        updater.dispatcher.add_handler(MessageHandler(filter, func, **kwargs))
    return _register


@command_handler('start', filters=Filters.chat_type.private)
def _start(update: Update, _context: CallbackContext):
    """Handle /start command"""
    first_name = update.message.from_user.first_name
    update.message.reply_text(f'Hi {first_name}! To use me, just invite me to your group!')
    update.message.reply_text('I\'ll send this reply to all new users who join the group:')

    logging.info('Sending WELCOME to %s (%d)', update.message.from_user.username, update.message.from_user.id)

    reply_welcome(update.message)


@message_handler(Filters.status_update.new_chat_members)
def _on_new_chat_members(update: Update, _context: CallbackContext):
    """Send "Vrrrrr'elcome!" when a new user joins the chat"""
    logging.info(
        'Sending WELCOME to %s in %s %r (%d)',
        ', '.join(f'{u.username!r} ({u.id})' for u in update.message.new_chat_members),
        update.message.chat.type,
        update.message.chat.title,
        update.message.chat_id)

    messages = reply_welcome(update.message)
    uids = {u.id for u in update.message.new_chat_members}
    schedule_cleanup(update.message.chat, messages, uids)


def reply_welcome(message: telegram.Message):
    """Send WELCOME reply to message"""
    return [
        message.reply_sticker(WELCOME_STICKER),
        message.reply_voice(WELCOME_VOICE, quote=True, caption=WELCOME_CAPTION, parse_mode='MarkdownV2')
    ]


def schedule_cleanup(chat: telegram.Chat, messages: List[telegram.Message], uids: Set[int]):
    """Schedule cleanup of unneeded messages"""
    uids = uids.copy()

    def _cleanup(_context):
        for uid in list(uids):
            chat_member = chat.get_member(uid)
            if chat_member.status in {telegram.ChatMember.KICKED, telegram.ChatMember.LEFT}:
                uids.remove(uid)

        if not uids:
            # All users referenced in this message have left the chat!
            for message in messages:
                logging.info('Removing message %d (all users left)', message.message_id)
                message.delete()

    updater.job_queue.run_once(_cleanup, RECENT_DURATION)


def schedule_message(when, chat_id, message, **kwargs):
    """Send a message at a scheduled time"""
    def _message(_context):
        updater.bot.send_message(chat_id, message, **kwargs)

    updater.job_queue.run_once(_message, when)


def schedule_sticker(when, chat_id, sticker, **kwargs):
    """Send a message at a scheduled time"""
    def _message(_context):
        updater.bot.send_sticker(chat_id, sticker, **kwargs)

    updater.job_queue.run_once(_message, when)


def main():
    logging.basicConfig(level=logging.INFO)

    midnight = datetime.datetime(2021, 12, 31, 13, 0, tzinfo=pytz.utc)  # Midnight Australia/Melbourne
    chat_id = -1001327561522  # CARNIüêäART chat
    schedule_message(midnight - datetime.timedelta(seconds=10), chat_id, "Ten!")
    schedule_message(midnight - datetime.timedelta(seconds=9), chat_id, "Nine!")
    schedule_message(midnight - datetime.timedelta(seconds=8), chat_id, "Eight!")
    schedule_message(midnight - datetime.timedelta(seconds=7), chat_id, "Seven!")
    schedule_message(midnight - datetime.timedelta(seconds=6), chat_id, "Six!")
    schedule_message(midnight - datetime.timedelta(seconds=5), chat_id, "Five!")
    schedule_message(midnight - datetime.timedelta(seconds=4), chat_id, "Four!")
    schedule_message(midnight - datetime.timedelta(seconds=3), chat_id, "Three!")
    schedule_message(midnight - datetime.timedelta(seconds=2), chat_id, "Two!")
    schedule_message(midnight - datetime.timedelta(seconds=1), chat_id, "One!")
    schedule_message(midnight - datetime.timedelta(seconds=0), chat_id, "Happy New Year! ü•≥")
    schedule_sticker(midnight - datetime.timedelta(seconds=0), chat_id, "CAACAgIAAxkBAAEDlwJhzrhCwNNc0e1WdU8pkbJIIMIRiAAClwMAAj-VzAqjs4NsRtSqZyME")

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()